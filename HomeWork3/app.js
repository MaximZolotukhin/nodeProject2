// main.js
import { Worker } from 'worker_threads'
import os from 'os'

// –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –æ—Ç 1 –¥–æ 300 000
const createArray = () => {
  const arr = new Array(300000)
  for (let i = 1; i <= 300000; i++) {
    arr[i - 1] = i
  }
  return arr
}

// –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç
const linearCount = (arr) => {
  let count = 0
  for (const num of arr) {
    if (num % 3 === 0) count++
  }
  return count
}

// –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —á–∞—Å—Ç–∏
const splitArray = (arr, n) => {
  const size = Math.ceil(arr.length / n)
  const chunks = []
  for (let i = 0; i < arr.length; i += size) {
    chunks.push(arr.slice(i, i + size))
  }
  return chunks
}

// –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç
const parallelCount = async (arr) => {
  const numCPUs = os.cpus().length
  const chunks = splitArray(arr, numCPUs)
  const workers = []

  for (const chunk of chunks) {
    const worker = new Promise((resolve, reject) => {
      const w = new Worker('./worker.js')
      w.postMessage(chunk)
      w.on('message', resolve)
      w.on('error', reject)
      w.on('exit', (code) => {
        if (code !== 0) reject(new Error(`Worker stopped with exit code ${code}`))
      })
    })
    workers.push(worker)
  }

  const results = await Promise.all(workers)
  return results.reduce((sum, count) => sum + count, 0)
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const run = async () => {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –æ—Ç 1 –¥–æ 300 000...')
  const arr = createArray()

  // –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  console.log('\nüîπ –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–¥—Ö–æ–¥...')
  const startLinear = performance.now()
  const linearResult = linearCount(arr)
  const timeLinear = performance.now() - startLinear

  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª, –¥–µ–ª—è—â–∏—Ö—Å—è –Ω–∞ 3: ${linearResult}`)
  console.log(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${timeLinear.toFixed(2)} –º—Å`)

  // –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  console.log('\nüîπ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥...')
  const startParallel = performance.now()
  const parallelResult = await parallelCount(arr)
  const timeParallel = performance.now() - startParallel

  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª, –¥–µ–ª—è—â–∏—Ö—Å—è –Ω–∞ 3: ${parallelResult}`)
  console.log(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${timeParallel.toFixed(2)} –º—Å`)

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
  console.log('\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:')
  console.log(`–õ–∏–Ω–µ–π–Ω—ã–π:   ${timeLinear.toFixed(2)} –º—Å`)
  console.log(`–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π: ${timeParallel.toFixed(2)} –º—Å`)

  if (timeParallel < timeLinear) {
    console.log('‚úÖ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±—ã—Å—Ç—Ä–µ–µ')
  } else {
    console.log('‚ùå –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –æ–∫–∞–∑–∞–ª—Å—è –±—ã—Å—Ç—Ä–µ–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑-–∑–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)')
  }
}

run().catch(console.error)
