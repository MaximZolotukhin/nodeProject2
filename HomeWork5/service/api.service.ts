// import { getKeyValue, TOKEN_DICTIONARY } from './storage.service.js'
import axios from 'axios'
import 'dotenv/config' // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

const getIcon = (icon: string) => {
  switch (icon.slice(0, -1)) {
    case '01':
      return '‚òÄÔ∏è'
    case '02':
      return 'üå§Ô∏è'
    case '03':
      return '‚òÅÔ∏è'
    case '04':
      return '‚òÅÔ∏è'
    case '09':
      return 'üåßÔ∏è'
    case '10':
      return 'üå¶Ô∏è'
    case '11':
      return 'üå©Ô∏è'
    case '13':
      return '‚ùÑÔ∏è'
    case '50':
      return 'üå´Ô∏è'
  }
}

// –¢–∏–ø–∏–∑–∞—Ü–∏—è
const getWeather = async (city: string, language: string) => {
  const token: string | undefined = process.env.TOKEN_API
  if (!token) {
    throw new Error('–ù–µ –∑–∞–¥–∞–Ω –∫–ª—é—á—å API, –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É -t [API_KEY]')
  }

  try {
    const response = await axios.get('https://api.openweathermap.org/data/2.5/weather', {
      params: {
        q: city,
        appid: token,
        lang: language,
        units: 'metric',
      },
    })

    return response.data
  } catch (error) {
    if (error instanceof Error) {
      // –ú–æ–∂–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã—à–µ
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è ${city}: ${error.message}`)
    }
  }
}

export { getWeather, getIcon }
